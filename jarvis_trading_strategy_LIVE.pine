//@version=6
strategy("JARVIS Live Trading Strategy", 
         shorttitle="JARVIS_LIVE", 
         overlay=true, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=5,
         currency=currency.USD,
         initial_capital=10000,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🎯 JARVIS LIVE TRADING STRATEGY - PRODUCTION VERSION
// Target: 70% Win Rate | 2:1 Risk-Reward | 5% Risk Per Trade
// Optimized for: EUR/USD, GBP/USD, USD/JPY, USD/CHF, AUD/USD, USD/CAD, NZD/USD, EUR/GBP
// LIVE TRADING SETTINGS: $10,000+ Capital | Conservative Risk Management
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Input Parameters
var g_general = "═══════ LIVE TRADING SETTINGS ═══════"
webhook_url = input.string("http://localhost:5000/webhook", "Webhook URL", group=g_general)
risk_percent = input.float(2.0, "Risk Per Trade (%)", minval=1.0, maxval=5.0, step=0.5, group=g_general)
risk_reward_ratio = input.float(2.5, "Risk:Reward Ratio", minval=2.0, maxval=4.0, step=0.1, group=g_general)
max_daily_trades = input.int(5, "Max Daily Trades", minval=1, maxval=10, group=g_general)
enable_live_trading = input.bool(true, "Enable Live Trading", group=g_general)

var g_indicators = "═══════ TECHNICAL INDICATORS ═══════"
// Moving Averages
ema_fast = input.int(12, "Fast EMA Period", minval=5, maxval=50, group=g_indicators)
ema_slow = input.int(26, "Slow EMA Period", minval=20, maxval=100, group=g_indicators)
sma_trend = input.int(50, "Trend SMA Period", minval=20, maxval=200, group=g_indicators)

// RSI Settings
rsi_period = input.int(14, "RSI Period", minval=5, maxval=30, group=g_indicators)
rsi_oversold = input.int(30, "RSI Oversold Level", minval=20, maxval=40, group=g_indicators)
rsi_overbought = input.int(70, "RSI Overbought Level", minval=60, maxval=80, group=g_indicators)

// MACD Settings
macd_fast = input.int(12, "MACD Fast Length", minval=5, maxval=20, group=g_indicators)
macd_slow = input.int(26, "MACD Slow Length", minval=20, maxval=50, group=g_indicators)
macd_signal = input.int(9, "MACD Signal Length", minval=5, maxval=15, group=g_indicators)

// Bollinger Bands
bb_period = input.int(20, "Bollinger Bands Period", minval=10, maxval=50, group=g_indicators)
bb_std = input.float(2.0, "Bollinger Bands Std Dev", minval=1.5, maxval=3.0, step=0.1, group=g_indicators)

var g_filters = "═══════ LIVE TRADING FILTERS ═══════"
use_volume_filter = input.bool(true, "Use Volume Filter", group=g_filters)
volume_threshold = input.float(1.5, "Volume Threshold Multiplier", minval=1.0, maxval=3.0, step=0.1, group=g_filters)
use_session_filter = input.bool(true, "Trade Only During Active Sessions", group=g_filters)
min_confidence = input.float(0.75, "Minimum Confidence Score", minval=0.70, maxval=0.95, step=0.05, group=g_filters)
avoid_news_times = input.bool(true, "Avoid Major News Times", group=g_filters)

// Live Trading Safety Features
var g_safety = "═══════ SAFETY FEATURES ═══════"
max_drawdown_limit = input.float(15.0, "Max Drawdown Limit (%)", minval=5.0, maxval=25.0, step=1.0, group=g_safety)
daily_loss_limit = input.float(5.0, "Daily Loss Limit (%)", minval=2.0, maxval=10.0, step=0.5, group=g_safety)
min_account_balance = input.float(5000.0, "Minimum Account Balance", minval=1000.0, maxval=50000.0, step=500.0, group=g_safety)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 TECHNICAL INDICATORS CALCULATION
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Moving Averages
ema_12 = ta.ema(close, ema_fast)
ema_26 = ta.ema(close, ema_slow)
sma_50 = ta.sma(close, sma_trend)

// RSI
rsi = ta.rsi(close, rsi_period)

// MACD
[macd_line, signal_line, macd_histogram] = ta.macd(close, macd_fast, macd_slow, macd_signal)

// Bollinger Bands
[bb_upper, bb_middle, bb_lower] = ta.bb(close, bb_period, bb_std)

// ATR for volatility
atr = ta.atr(14)

// Volume Analysis
volume_ma = ta.sma(volume, 20)
volume_surge = volume > volume_ma * volume_threshold

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🕐 LIVE TRADING SESSION FILTERS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// London Session: 08:00-17:00 GMT
london_session = hour >= 8 and hour <= 17

// New York Session: 13:00-22:00 GMT  
ny_session = hour >= 13 and hour <= 22

// Tokyo Session: 00:00-09:00 GMT
tokyo_session = hour >= 0 and hour <= 9

// London-NY Overlap: 13:00-17:00 GMT (Most volatile period)
london_ny_overlap = hour >= 13 and hour <= 17

// Active trading sessions (More conservative for live trading)
active_session = london_ny_overlap or (london_session and not avoid_news_times) or (ny_session and not avoid_news_times)

// Avoid major news times (approximate)
major_news_times = (hour == 8 and minute >= 30 and minute <= 35) or  // London open news
                   (hour == 13 and minute >= 30 and minute <= 35) or  // NY open news
                   (hour == 15 and minute >= 0 and minute <= 5)       // FOMC typical time

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🎯 LIVE TRADING SIGNAL GENERATION - OPTIMIZED FOR REAL MONEY
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Trend Analysis (More conservative)
strong_uptrend = ema_12 > ema_26 and ema_26 > sma_50 and close > sma_50 and close > ema_12
strong_downtrend = ema_12 < ema_26 and ema_26 < sma_50 and close < sma_50 and close < ema_12
sideways_market = math.abs(ema_12 - ema_26) < atr * 0.3  // Tighter range for live trading

// Momentum Signals (More strict)
bullish_momentum = macd_line > signal_line and macd_histogram > macd_histogram[1] and macd_histogram > 0
bearish_momentum = macd_line < signal_line and macd_histogram < macd_histogram[1] and macd_histogram < 0

// RSI Conditions (Avoiding extremes more strictly)
rsi_bullish = rsi > 45 and rsi < 65 and rsi > rsi[1] and rsi[1] > rsi[2]
rsi_bearish = rsi < 55 and rsi > 35 and rsi < rsi[1] and rsi[1] < rsi[2]

// Bollinger Band Conditions (More conservative)
bb_squeeze = (bb_upper - bb_lower) < atr * 1.5
bb_expansion = (bb_upper - bb_lower) > atr * 2.5
price_near_middle = math.abs(close - bb_middle) < atr * 0.3

// Volume Confirmation (Stronger requirement for live trading)
volume_confirmed = not use_volume_filter or (volume_surge and volume > volume_ma * 1.3)

// Session Filter (More restrictive)
session_ok = not use_session_filter or (active_session and not major_news_times)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 LIVE BUY SIGNAL LOGIC - MAXIMUM PRECISION
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Primary Buy Conditions (Stricter)
buy_trend_ok = strong_uptrend and not sideways_market
buy_momentum_ok = bullish_momentum and rsi_bullish
buy_price_action = close > open and close > close[1] and high > high[1]
buy_bb_condition = close > bb_middle and close < bb_upper * 0.95  // Stay away from extreme levels

// Advanced Buy Filters (Enhanced for live trading)
buy_pullback = close[3] < ema_12[3] and close[2] < ema_12[2] and close[1] > ema_12[1] and close > ema_12
buy_breakout = close > ta.highest(high, 10)[1] and volume_surge
buy_support_bounce = low <= bb_lower[1] and close > bb_lower and close > bb_middle

// Combined Buy Signal (Very selective for live trading)
buy_signal = buy_trend_ok and buy_momentum_ok and buy_price_action and buy_bb_condition and 
             (buy_pullback or buy_breakout or buy_support_bounce) and 
             volume_confirmed and session_ok and enable_live_trading

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📉 LIVE SELL SIGNAL LOGIC - MAXIMUM PRECISION
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Primary Sell Conditions (Stricter)
sell_trend_ok = strong_downtrend and not sideways_market
sell_momentum_ok = bearish_momentum and rsi_bearish
sell_price_action = close < open and close < close[1] and low < low[1]
sell_bb_condition = close < bb_middle and close > bb_lower * 1.05  // Stay away from extreme levels

// Advanced Sell Filters (Enhanced for live trading)
sell_pullback = close[3] > ema_12[3] and close[2] > ema_12[2] and close[1] < ema_12[1] and close < ema_12
sell_breakdown = close < ta.lowest(low, 10)[1] and volume_surge
sell_resistance_reject = high >= bb_upper[1] and close < bb_upper and close < bb_middle

// Combined Sell Signal (Very selective for live trading)
sell_signal = sell_trend_ok and sell_momentum_ok and sell_price_action and sell_bb_condition and 
              (sell_pullback or sell_breakdown or sell_resistance_reject) and 
              volume_confirmed and session_ok and enable_live_trading

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🎲 LIVE TRADING CONFIDENCE SCORING SYSTEM
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

calculate_live_confidence(is_buy) =>
    confidence = 0.0
    
    // Base confidence from trend strength (Stricter scoring)
    if is_buy
        confidence += strong_uptrend ? 0.30 : 0.0  // Only strong trends get points
        confidence += rsi > 50 and rsi < 60 ? 0.20 : 0.0  // Sweet spot RSI
        confidence += macd_line > signal_line and macd_histogram > 0 ? 0.20 : 0.0
        confidence += close > bb_middle and close < bb_upper * 0.9 ? 0.15 : 0.0
        confidence += volume_surge and volume > volume_ma * 1.5 ? 0.10 : 0.0
        confidence += london_ny_overlap ? 0.05 : 0.0  // Bonus for best session
    else
        confidence += strong_downtrend ? 0.30 : 0.0  // Only strong trends get points
        confidence += rsi < 50 and rsi > 40 ? 0.20 : 0.0  // Sweet spot RSI
        confidence += macd_line < signal_line and macd_histogram < 0 ? 0.20 : 0.0
        confidence += close < bb_middle and close > bb_lower * 1.1 ? 0.15 : 0.0
        confidence += volume_surge and volume > volume_ma * 1.5 ? 0.10 : 0.0
        confidence += london_ny_overlap ? 0.05 : 0.0  // Bonus for best session
    
    confidence

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 💰 LIVE TRADING POSITION SIZING & RISK MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Conservative position sizing for live trading
calculate_live_position_size(entry_price, stop_loss_price) =>
    // Use more conservative risk for live trading
    risk_amount = strategy.equity * (risk_percent / 100)
    price_diff = math.abs(entry_price - stop_loss_price)
    position_size = risk_amount / price_diff
    
    // Additional safety: Limit position size to max 2% of equity regardless of risk calculation
    max_position_value = strategy.equity * 0.02
    max_position_size = max_position_value / entry_price
    
    math.min(position_size, max_position_size)

// Dynamic stop loss and take profit for live trading
calculate_live_levels(is_buy, entry_price) =>
    // More conservative ATR multiplier for live trading
    atr_multiplier = 2.0  // Wider stops for live trading
    stop_distance = atr * atr_multiplier
    
    var float stop_loss = na
    var float take_profit = na
    
    if is_buy
        stop_loss := entry_price - stop_distance
        take_profit := entry_price + (stop_distance * risk_reward_ratio)
    else
        stop_loss := entry_price + stop_distance
        take_profit := entry_price - (stop_distance * risk_reward_ratio)
    
    [stop_loss, take_profit]

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🛡️ LIVE TRADING SAFETY CHECKS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Daily trade counter
var int daily_trade_count = 0
var int last_trade_day = 0

// Reset daily counter
if dayofyear != last_trade_day
    daily_trade_count := 0
    last_trade_day := dayofyear

// Safety checks
account_balance_ok = strategy.equity >= min_account_balance
daily_trades_ok = daily_trade_count < max_daily_trades
drawdown_ok = strategy.max_drawdown <= max_drawdown_limit
daily_loss_ok = strategy.netprofit >= -(strategy.initial_capital * daily_loss_limit / 100)

// Master safety switch
safety_ok = account_balance_ok and daily_trades_ok and drawdown_ok and daily_loss_ok

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🚀 LIVE TRADE EXECUTION & WEBHOOK ALERTS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Execute live trades with maximum safety
if buy_signal and safety_ok
    buy_confidence = calculate_live_confidence(true)
    if buy_confidence >= min_confidence
        [sl, tp] = calculate_live_levels(true, close)
        pos_size = calculate_live_position_size(close, sl)
        
        // Increment daily trade counter
        daily_trade_count := daily_trade_count + 1
        
        // Create enhanced webhook alert message for live trading
        alert_message = '{"pair":"' + syminfo.ticker + 
                       '","action":"buy"' + 
                       ',"entry":' + str.tostring(close) + 
                       ',"stop_loss":' + str.tostring(sl) + 
                       ',"take_profit":' + str.tostring(tp) + 
                       ',"confidence":' + str.tostring(buy_confidence) + 
                       ',"strategy":"JARVIS_LIVE"' + 
                       ',"risk_reward":' + str.tostring(risk_reward_ratio) + 
                       ',"position_size":' + str.tostring(pos_size) + 
                       ',"daily_trade_count":' + str.tostring(daily_trade_count) + 
                       ',"account_equity":' + str.tostring(strategy.equity) + 
                       ',"timestamp":"' + str.tostring(time) + '"}'
        
        strategy.entry("JARVIS_LIVE_LONG", strategy.long, qty=pos_size, 
                      alert_message=alert_message)
        strategy.exit("JARVIS_LIVE_LONG_EXIT", "JARVIS_LIVE_LONG", 
                     stop=sl, limit=tp, 
                     alert_message='{"action":"close","pair":"' + syminfo.ticker + '","type":"long_exit","strategy":"JARVIS_LIVE"}')

if sell_signal and safety_ok
    sell_confidence = calculate_live_confidence(false)
    if sell_confidence >= min_confidence
        [sl, tp] = calculate_live_levels(false, close)
        pos_size = calculate_live_position_size(close, sl)
        
        // Increment daily trade counter
        daily_trade_count := daily_trade_count + 1
        
        // Create enhanced webhook alert message for live trading
        alert_message = '{"pair":"' + syminfo.ticker + 
                       '","action":"sell"' + 
                       ',"entry":' + str.tostring(close) + 
                       ',"stop_loss":' + str.tostring(sl) + 
                       ',"take_profit":' + str.tostring(tp) + 
                       ',"confidence":' + str.tostring(sell_confidence) + 
                       ',"strategy":"JARVIS_LIVE"' + 
                       ',"risk_reward":' + str.tostring(risk_reward_ratio) + 
                       ',"position_size":' + str.tostring(pos_size) + 
                       ',"daily_trade_count":' + str.tostring(daily_trade_count) + 
                       ',"account_equity":' + str.tostring(strategy.equity) + 
                       ',"timestamp":"' + str.tostring(time) + '"}'
        
        strategy.entry("JARVIS_LIVE_SHORT", strategy.short, qty=pos_size, 
                      alert_message=alert_message)
        strategy.exit("JARVIS_LIVE_SHORT_EXIT", "JARVIS_LIVE_SHORT", 
                     stop=sl, limit=tp, 
                     alert_message='{"action":"close","pair":"' + syminfo.ticker + '","type":"short_exit","strategy":"JARVIS_LIVE"}')

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 LIVE TRADING VISUAL INDICATORS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Plot EMAs
plot(ema_12, "EMA 12", color=color.blue, linewidth=2)
plot(ema_26, "EMA 26", color=color.red, linewidth=2)
plot(sma_50, "SMA 50", color=color.yellow, linewidth=3)

// Plot Bollinger Bands
plot(bb_upper, "BB Upper", color=color.gray, linewidth=1)
plot(bb_middle, "BB Middle", color=color.orange, linewidth=1)
plot(bb_lower, "BB Lower", color=color.gray, linewidth=1)

// Live Trading Signal Markers (More prominent)
plotshape(buy_signal and calculate_live_confidence(true) >= min_confidence and safety_ok, 
         "LIVE Buy Signal", shape.triangleup, location.belowbar, color.lime, size=size.large)
plotshape(sell_signal and calculate_live_confidence(false) >= min_confidence and safety_ok, 
         "LIVE Sell Signal", shape.triangledown, location.abovebar, color.red, size=size.large)

// Safety warning indicators
plotshape(not safety_ok, "Safety Warning", shape.xcross, location.abovebar, color.orange, size=size.small)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 LIVE TRADING PERFORMANCE STATISTICS TABLE
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

if barstate.islast
    var table live_stats_table = table.new(position.top_right, 3, 10, bgcolor=color.white, border_width=2)
    
    win_rate = strategy.wintrades / strategy.closedtrades * 100
    profit_factor = strategy.grossprofit / strategy.grossloss
    avg_win = strategy.grossprofit / strategy.wintrades
    avg_loss = strategy.grossloss / strategy.losstrades
    
    table.cell(live_stats_table, 0, 0, "🔴 JARVIS LIVE", text_color=color.white, bgcolor=color.red, text_size=size.normal)
    table.cell(live_stats_table, 1, 0, "VALUE", text_color=color.black, text_size=size.normal)
    table.cell(live_stats_table, 2, 0, "TARGET", text_color=color.black, text_size=size.normal)
    
    table.cell(live_stats_table, 0, 1, "Win Rate", text_color=color.black)
    table.cell(live_stats_table, 1, 1, str.tostring(win_rate, "#.##") + "%", text_color=win_rate >= 70 ? color.green : color.red)
    table.cell(live_stats_table, 2, 1, "70%", text_color=color.black)
    
    table.cell(live_stats_table, 0, 2, "Profit Factor", text_color=color.black)
    table.cell(live_stats_table, 1, 2, str.tostring(profit_factor, "#.##"), text_color=profit_factor >= 2.5 ? color.green : color.red)
    table.cell(live_stats_table, 2, 2, "2.5+", text_color=color.black)
    
    table.cell(live_stats_table, 0, 3, "Total Trades", text_color=color.black)
    table.cell(live_stats_table, 1, 3, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(live_stats_table, 2, 3, "50+", text_color=color.black)
    
    table.cell(live_stats_table, 0, 4, "Net Profit", text_color=color.black)
    table.cell(live_stats_table, 1, 4, "$" + str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red)
    table.cell(live_stats_table, 2, 4, "Positive", text_color=color.black)
    
    table.cell(live_stats_table, 0, 5, "Max Drawdown", text_color=color.black)
    table.cell(live_stats_table, 1, 5, str.tostring(strategy.max_drawdown, "#.##") + "%", text_color=color.red)
    table.cell(live_stats_table, 2, 5, "<15%", text_color=color.black)
    
    table.cell(live_stats_table, 0, 6, "Daily Trades", text_color=color.black)
    table.cell(live_stats_table, 1, 6, str.tostring(daily_trade_count), text_color=daily_trade_count <= max_daily_trades ? color.green : color.red)
    table.cell(live_stats_table, 2, 6, str.tostring(max_daily_trades), text_color=color.black)
    
    table.cell(live_stats_table, 0, 7, "Risk Per Trade", text_color=color.black)
    table.cell(live_stats_table, 1, 7, str.tostring(risk_percent) + "%", text_color=color.black)
    table.cell(live_stats_table, 2, 7, "2%", text_color=color.black)
    
    table.cell(live_stats_table, 0, 8, "Account Equity", text_color=color.black)
    table.cell(live_stats_table, 1, 8, "$" + str.tostring(strategy.equity, "#.##"), text_color=strategy.equity >= min_account_balance ? color.green : color.red)
    table.cell(live_stats_table, 2, 8, "$" + str.tostring(min_account_balance), text_color=color.black)
    
    table.cell(live_stats_table, 0, 9, "Safety Status", text_color=color.black)
    table.cell(live_stats_table, 1, 9, safety_ok ? "✅ SAFE" : "⛔ HOLD", text_color=safety_ok ? color.green : color.red)
    table.cell(live_stats_table, 2, 9, "ACTIVE", text_color=color.black)
