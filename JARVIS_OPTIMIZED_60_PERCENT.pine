//@version=6
strategy("JARVIS AGGRESSIVE - 5+ TRADES/DAY", 
         shorttitle="JARVIS_AGG", 
         overlay=true, 
         default_qty_type=strategy.percent_of_equity, 
         default_qty_value=2,
         currency=currency.USD,
         initial_capital=25,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🚀 JARVIS AGGRESSIVE STRATEGY - FREQUENCY OVER PERFECTION
// Target: 5+ Trades Per Day | Quick EMA Signals | 1.5:1 Risk-Reward | 2% Risk Per Trade
// Based on: EMA 9/21 Crossover + Loose RSI Filter + 24/7 Trading
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Input Parameters - SIMPLIFIED
var g_general = "═══════ GENERAL SETTINGS ═══════"
webhook_url = input.string("https://jarvis-quant-sys.onrender.com/webhook", "Webhook URL", group=g_general)
risk_percent = input.float(2.0, "Risk Per Trade (%)", minval=1.0, maxval=5.0, step=0.5, group=g_general)
risk_reward_ratio = input.float(1.5, "Risk:Reward Ratio", minval=1.2, maxval=2.0, step=0.1, group=g_general)

var g_strategy = "═══════ AGGRESSIVE COMPONENTS ═══════"
// Fast EMAs for Quick Signals
ema_fast = input.int(9, "Fast EMA", minval=5, maxval=12, group=g_strategy)
ema_slow = input.int(21, "Slow EMA", minval=18, maxval=25, group=g_strategy)

// Loose RSI Filter (More Trades)
rsi_period = input.int(14, "RSI Period", minval=10, maxval=20, group=g_strategy)
rsi_min = input.int(35, "RSI Minimum for Longs", minval=30, maxval=40, group=g_strategy)
rsi_max = input.int(80, "RSI Maximum for Longs", minval=70, maxval=85, group=g_strategy)
rsi_max_short = input.int(65, "RSI Maximum for Shorts", minval=60, maxval=70, group=g_strategy)
rsi_min_short = input.int(20, "RSI Minimum for Shorts", minval=15, maxval=30, group=g_strategy)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 CORE INDICATORS - SIMPLE & EFFECTIVE
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// 1. Fast EMA System for Quick Signals
ema_9 = ta.ema(close, ema_fast)
ema_21 = ta.ema(close, ema_slow)

// 2. RSI for Basic Momentum (Loose Filter)
rsi = ta.rsi(close, rsi_period)

// 3. ATR for Position Sizing
atr = ta.atr(14)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🕐 24/7 TRADING (NO SESSION RESTRICTIONS)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Trade all sessions for maximum frequency
session_ok = true  // Always trade

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🎯 SIMPLE SIGNAL GENERATION (3 CONDITIONS ONLY)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Component 1: EMA Crossover (Primary Signal) - FIXED
ema_bullish = ema_9 > ema_21    // Removed price position requirement
ema_bearish = ema_9 < ema_21    // Removed price position requirement

// Component 2: Looser RSI Filter (Allow More Trades) - WIDENED
rsi_ok_long = rsi >= 25 and rsi <= 85    // Widened from 35-80
rsi_ok_short = rsi <= 75 and rsi >= 15   // Widened from 20-65

// Component 3: Simpler Momentum (Less Restrictive)
momentum_up = close > close[2]      // 2-bar momentum instead of 1-bar
momentum_down = close < close[2]    // 2-bar momentum instead of 1-bar

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 BUY SIGNAL (3 SIMPLE CONDITIONS)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

buy_signal = ema_bullish and          // 1. EMA 9 > EMA 21 + Price above EMA 9
             rsi_ok_long and          // 2. RSI between 35-80 (loose)
             momentum_up              // 3. Price rising

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📉 SELL SIGNAL (3 SIMPLE CONDITIONS)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

sell_signal = ema_bearish and         // 1. EMA 9 < EMA 21 + Price below EMA 9
              rsi_ok_short and        // 2. RSI between 20-65 (loose)
              momentum_down           // 3. Price falling

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🔧 SYMBOL FORMAT CONVERTER FOR JARVIS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

convert_symbol_for_jarvis() =>
    ticker = syminfo.ticker
    symbol_converted = 
      ticker == "EURUSD" ? "EUR_USD" :
      ticker == "GBPUSD" ? "GBP_USD" :
      ticker == "USDJPY" ? "USD_JPY" :
      ticker == "USDCHF" ? "USD_CHF" :
      ticker == "AUDUSD" ? "AUD_USD" :
      ticker == "USDCAD" ? "USD_CAD" :
      ticker == "NZDUSD" ? "NZD_USD" :
      ticker == "EURGBP" ? "EUR_GBP" : ticker
    symbol_converted

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 💰 POSITION SIZING & RISK MANAGEMENT (SIMPLE)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Calculate position size based on ATR stop
calculate_position_size(entry_price, stop_loss_price) =>
    risk_amount = strategy.equity * (risk_percent / 100)
    price_diff = math.abs(entry_price - stop_loss_price)
    position_size = risk_amount / price_diff
    position_size

// Simple ATR-based stops (1.5x ATR for frequent trading)
calculate_levels(is_buy, entry_price) =>
    stop_distance = atr * 1.5  // 1.5x ATR stop for aggressive trading
    
    var float stop_loss = na
    var float take_profit = na
    
    if is_buy
        stop_loss := entry_price - stop_distance
        take_profit := entry_price + (stop_distance * risk_reward_ratio)
    else
        stop_loss := entry_price + stop_distance
        take_profit := entry_price - (stop_distance * risk_reward_ratio)
    
    [stop_loss, take_profit]

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 🚀 TRADE EXECUTION & WEBHOOK ALERTS (AGGRESSIVE)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Execute BUY trades
if buy_signal
    [sl, tp] = calculate_levels(true, close)
    pos_size = calculate_position_size(close, sl)
    
    // Create webhook alert
    jarvis_symbol = convert_symbol_for_jarvis()
    alert_message = '{"symbol":"' + jarvis_symbol + 
                   '","action":"BUY"' + 
                   ',"price":' + str.tostring(close, "#.#####") + 
                   ',"time":"' + str.tostring(time, "yyyy-MM-ddTHH:mm:ssZ") + 
                   '","strategy":"JARVIS_AGGRESSIVE"' + 
                   ',"stop_loss":' + str.tostring(sl, "#.#####") + 
                   ',"take_profit":' + str.tostring(tp, "#.#####") + '}'
    
    strategy.entry("LONG", strategy.long, qty=pos_size, alert_message=alert_message)
    strategy.exit("LONG_EXIT", "LONG", stop=sl, limit=tp)
    alert(alert_message, alert.freq_once_per_bar)

// Execute SELL trades
if sell_signal
    [sl, tp] = calculate_levels(false, close)
    pos_size = calculate_position_size(close, sl)
    
    // Create webhook alert
    jarvis_symbol = convert_symbol_for_jarvis()
    alert_message = '{"symbol":"' + jarvis_symbol + 
                   '","action":"SELL"' + 
                   ',"price":' + str.tostring(close, "#.#####") + 
                   ',"time":"' + str.tostring(time, "yyyy-MM-ddTHH:mm:ssZ") + 
                   '","strategy":"JARVIS_AGGRESSIVE"' + 
                   ',"stop_loss":' + str.tostring(sl, "#.#####") + 
                   ',"take_profit":' + str.tostring(tp, "#.#####") + '}'
    
    strategy.entry("SHORT", strategy.short, qty=pos_size, alert_message=alert_message)
    strategy.exit("SHORT_EXIT", "SHORT", stop=sl, limit=tp)
    alert(alert_message, alert.freq_once_per_bar)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 VISUAL INDICATORS (SIMPLE)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

// Plot EMAs
plot(ema_9, "EMA 9", color=color.blue, linewidth=2)
plot(ema_21, "EMA 21", color=color.red, linewidth=2)

// Signal markers
plotshape(buy_signal, "Buy", shape.triangleup, location.belowbar, color.green, size=size.normal)
plotshape(sell_signal, "Sell", shape.triangledown, location.abovebar, color.red, size=size.normal)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 PERFORMANCE STATISTICS (SIMPLE)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════

if barstate.islast
    var table stats_table = table.new(position.top_right, 2, 5, bgcolor=color.white, border_width=1)
    
    win_rate = strategy.closedtrades > 0 ? strategy.wintrades / strategy.closedtrades * 100 : 0
    
    table.cell(stats_table, 0, 0, "JARVIS AGGRESSIVE", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 0, "VALUE", text_color=color.black, text_size=size.small)
    
    table.cell(stats_table, 0, 1, "Total Trades", text_color=color.black)
    table.cell(stats_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    
    table.cell(stats_table, 0, 2, "Win Rate", text_color=color.black)
    table.cell(stats_table, 1, 2, str.tostring(win_rate, "#.#") + "%", text_color=win_rate >= 50 ? color.green : color.red)
    
    table.cell(stats_table, 0, 3, "Net Profit", text_color=color.black)
    table.cell(stats_table, 1, 3, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red)
    
    table.cell(stats_table, 0, 4, "Risk/Trade", text_color=color.black)
    table.cell(stats_table, 1, 4, str.tostring(risk_percent) + "%", text_color=color.black)
