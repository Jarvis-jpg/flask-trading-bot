//@version=6
    table.cell(stats_table, 1, 4, str.tostring(risk_percent) + "%", text_color=color.black)
// Calculate position size based on ATR stop
calculate_position_size(entry_price, stop_loss_price) =>
    risk_amount = strategy.equity * (risk_percent / 100)
    price_diff = math.abs(entry_price - stop_loss_price)
    position_size = risk_amount / price_diff
    position_size

// Enhanced ATR-based stops (2.0x ATR for quality trading)
calculate_levels(is_buy, entry_price) =>
    stop_distance = atr * 2.0  // 2.0x ATR stop for quality trading
    var float stop_loss = na
    var float take_profit = na

    if is_buy
        stop_loss := entry_price - stop_distance
        take_profit := entry_price + (stop_distance * risk_reward_ratio)
    else
        stop_loss := entry_price + stop_distance
        take_profit := entry_price - (stop_distance * risk_reward_ratio)
    
    [stop_loss, take_profit]

// Execute BUY trades
if buy_signal
    [sl, tp] = calculate_levels(true, close)
    pos_size = calculate_position_size(close, sl)

    // Create webhook alert
    jarvis_symbol = convert_symbol_for_jarvis()
    alert_message = "{\""+"symbol"+"\": \""+ jarvis_symbol +
                   "\", \""+"action"+"\": \""+"BUY"+"\"" +
                   ", \""+"price"+"\": "+ str.tostring(close, "#.#####") +
                   ", \""+"strategy"+"\": \""+"JARVIS_OPTIMIZED"+"\"" +
                   ", \""+"stop_loss"+"\": "+ str.tostring(sl, "#.#####") +
                   ", \""+"take_profit"+"\": "+ str.tostring(tp, "#.#####") + "}"
    
    strategy.entry("LONG", strategy.long, qty=pos_size, alert_message=alert_message)
    strategy.exit("LONG_EXIT", "LONG", stop=sl, limit=tp)
    alert(alert_message, alert.freq_once_per_bar)

// Execute SELL trades
if sell_signal
    [sl, tp] = calculate_levels(false, close)
    pos_size = calculate_position_size(close, sl)
    
    // Create webhook alert
    jarvis_symbol = convert_symbol_for_jarvis()
    alert_message = "{\""+"symbol"+"\": \""+ jarvis_symbol +
                   "\", \""+"action"+"\": \""+"SELL"+"\"" +
                   ", \""+"price"+"\": "+ str.tostring(close, "#.#####") +
                   ", \""+"strategy"+"\": \""+"JARVIS_OPTIMIZED"+"\"" +
                   ", \""+"stop_loss"+"\": "+ str.tostring(sl, "#.#####") +
                   ", \""+"take_profit"+"\": "+ str.tostring(tp, "#.#####") + "}"
    
    strategy.entry("SHORT", strategy.short, qty=pos_size, alert_message=alert_message)
    strategy.exit("SHORT_EXIT", "SHORT", stop=sl, limit=tp)
    alert(alert_message, alert.freq_once_per_bar)
plot(ema_21, "EMA 21", color=color.blue, linewidth=2)
plot(ema_50, "EMA 50", color=color.red, linewidth=2)
// Signal markers with session quality
plotshape(buy_signal, "Buy", shape.triangleup, location.belowbar, 
          color=session_quality == 3 ? color.lime : color.green, size=size.normal)
plotshape(sell_signal, "Sell", shape.triangledown, location.abovebar, 
          color=session_quality == 3 ? color.red : color.maroon, size=size.normal)
// Session quality background
session_color = session_quality == 3 ? color.new(color.green, 95) : session_quality == 2 ? color.new(color.yellow, 95) : na
bgcolor(session_color)
if barstate.islast
    var table stats_table = table.new(position.top_right, 2, 5)
    table.set_bgcolor(stats_table, color.white)
    table.set_border_width(stats_table, 1)

    win_rate = strategy.closedtrades > 0 ? (strategy.wintrades / strategy.closedtrades) * 100 : 0.0

    table.cell(stats_table, 0, 0, "JARVIS OPTIMIZED", text_color=color.black, text_size=size.small)
    table.cell(stats_table, 1, 0, "VALUE", text_color=color.black, text_size=size.small)

    table.cell(stats_table, 0, 1, "Total Trades", text_color=color.black)
    table.cell(stats_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    
    table.cell(stats_table, 0, 2, "Win Rate", text_color=color.black)
    table.cell(stats_table, 1, 2, str.tostring(win_rate, "#.#") + "%", text_color=win_rate >= 60 ? color.green : color.red)

    table.cell(stats_table, 0, 3, "Net Profit", text_color=color.black)
    table.cell(stats_table, 1, 3, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red)

    table.cell(stats_table, 0, 4, "Risk/Trade", text_color=color.black)
    table.cell(stats_table, 1, 4, str.tostring(risk_percent, "#.#") + "%", text_color=color.black)
    table.cell(stats_table, 1, 1, str.tostring(strategy.closedtrades), text_color=color.black)
    table.cell(stats_table, 0, 2, "Win Rate", text_color=color.black)
    table.cell(stats_table, 1, 2, str.tostring(win_rate, "#.#") + "%", text_color=win_rate >= 60 ? color.green : color.red)
    table.cell(stats_table, 0, 3, "Net Profit", text_color=color.black)
    table.cell(stats_table, 1, 3, str.tostring(strategy.netprofit, "#.##"), text_color=strategy.netprofit > 0 ? color.green : color.red)
    table.cell(stats_table, 0, 4, "Risk/Trade", text_color=color.black)
    table.cell(stats_table, 1, 4, str.tostring(risk_percent) + "%", text_color=color.black)

