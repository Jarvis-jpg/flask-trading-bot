from utils.journal_logger import log_trade
import requests
import random
from datetime import datetime, timedelta
import time

# CONFIG
WEBHOOK_URL = "https://jarvis-quant-sys.onrender.com/webhook"
AI_TRIGGER_URL = "https://jarvis-quant-sys.onrender.com/ai/train"
STRATEGIES = ["MACD+EMA"]
PAIRS = ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "USDCAD"]
SIDES = ["buy", "sell"]

# Simulate 100 trades
print("ðŸ“¡ Sending 100 simulated trades...")
log_trade(
    pair=trade["pair"],
    action=trade["side"],
    entry_price=trade["entry_price"],
    sl=trade["sl"],
    tp=trade["tp"],
    result=trade["result"],       # e.g., "win" or "loss"
    profit=trade["profit"],       # e.g., 50 or -25
    rr=trade["rr"],               # calculated risk/reward
    strategy=trade["strategy"]
)

for i in range(100):
    payload = {
        "ticker": random.choice(PAIRS),
        "side": random.choice(SIDES),
        "price": round(random.uniform(1.1, 1.5), 5),
        "strategy": random.choice(STRATEGIES),
        "time": (datetime.utcnow() - timedelta(minutes=i)).isoformat() + "Z"
    }
    response = requests.post(WEBHOOK_URL, json=payload)
    print(f"#{i+1} Sent: {payload['ticker']} {payload['side']} -> {response.status_code} {response.text}")
    time.sleep(0.2)  # slight delay to simulate real usage

# Trigger AI training after trades
print("\nðŸ¤– Triggering AI Training...")
ai_response = requests.get(AI_TRIGGER_URL)
print(f"AI Training Triggered: {ai_response.status_code} - {ai_response.text}")
